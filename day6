"""1. Binary Tree Inorder Traversal
Given the root of a binary tree, return the inorder traversal of its nodes' values"""
#include <iostream>
#include <vector>
using namespace std;
struct TreeNode {
 int val;
 TreeNode *left;
 TreeNode *right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
void inorder(TreeNode* root, vector<int>& result) {
 if (!root) return;
 inorder(root->left, result);
 result.push_back(root->val);
 inorder(root->right, result);
}
vector<int> inorderTraversal(TreeNode* root) {
 vector<int> result;
 inorder(root, result);
 return result;
}
int main() {
 // Create tree: [1, null, 2, 3]
 TreeNode* root = new TreeNode(1);
 root->right = new TreeNode(2);
 root->right->left = new TreeNode(3);
 vector<int> result = inorderTraversal(root);
 for (int val : result) {
 cout << val << " ";
 }
 cout << endl;
 return 0;
}

"""2.Binary Tree Preorder Traversal
Given the root of a binary tree, return the preorder traversal of its nodes' values."""
  #include <iostream>
#include <vector>
using namespace std;
struct TreeNode {
 int val;
 TreeNode *left;
   TreeNode *right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
void preorder(TreeNode* root, vector<int>& result) {
 if (!root) return;
 result.push_back(root->val);
 preorder(root->left, result);
 preorder(root->right, result);
}
vector<int> preorderTraversal(TreeNode* root) {
 vector<int> result;
 preorder(root, result);
 return result;
}
int main() {
 // Create tree: [1, null, 2, 3]
 TreeNode* root = new TreeNode(1);
 root->right = new TreeNode(2);
 root->right->left = new TreeNode(3);
 vector<int> result = preorderTraversal(root);
 for (int val : result) {
 cout << val << " ";
 }
 cout << endl;
 return 0;
}

"""3. Binary Tree - Sum of All Nodes
Given the root of a binary tree, you need to find the sum of all the node values in the binary tree"""
  #include <iostream>
using namespace std;
  struct TreeNode {
 int val;
 TreeNode *left;
 TreeNode *right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
int sumOfAllNodes(TreeNode* root) {
 if (!root) return 0;
 return root->val + sumOfAllNodes(root->left) + sumOfAllNodes(root->right);
}
int main() {
 // Create tree: [5, 2, 6, 1, 3, 4, 7]
 TreeNode* root = new TreeNode(5);
 root->left = new TreeNode(2);
 root->right = new TreeNode(6);
 root->left->left = new TreeNode(1);
 root->left->right = new TreeNode(3);
 root->right->left = new TreeNode(4);
 root->right->right = new TreeNode(7);
 cout << "Sum of all nodes: " << sumOfAllNodes(root) << endl;
 return 0;
}

"""1. Same Tree
Two binary trees are considered the same if they are structurally identical, and the nodes have the
same value."""
  #include <iostream>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right;
  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
bool isSameTree(TreeNode* p, TreeNode* q) {
 if (!p && !q) return true; // Both trees are empty
 if (!p || !q || p->val != q->val) return false; // Structure or value mismatch
 return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
}
int main() {
 // Create tree p: [1, 2, 3]
 TreeNode* p = new TreeNode(1);
 p->left = new TreeNode(2);
 p->right = new TreeNode(3);
 // Create tree q: [1, 2, 3]
 TreeNode* q = new TreeNode(1);
 q->left = new TreeNode(2);
 q->right = new TreeNode(3);
 cout << (isSameTree(p, q) ? "true" : "false") << endl;
 return 0;
}

"""2. Invert Binary Tree
Given the root of a binary tree, invert the tree, and return its root"""
  #include <iostream>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right; TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
TreeNode* invertTree(TreeNode* root) {
 if (!root) return nullptr;
 swap(root->left, root->right); // Swap left and right child
 invertTree(root->left);
 invertTree(root->right);
 return root;
}
void preorderTraversal(TreeNode* root) {
 if (!root) return;
 cout << root->val << " ";
 preorderTraversal(root->left);
 preorderTraversal(root->right);
}
int main() {
 // Create tree: [4, 2, 7, 1, 3, 6, 9]
 TreeNode* root = new TreeNode(4);
 root->left = new TreeNode(2);
 root->right = new TreeNode(7);
 root->left->left = new TreeNode(1);
 root->left->right = new TreeNode(3);
 root->right->left = new TreeNode(6);
 root->right->right = new TreeNode(9);
 root = invertTree(root);
 preorderTraversal(root); // Expected output: 4 7 9 6 2 3 1
 cout << endl;
 return 0;
}

"""Path Sum
Given a binary tree and a sum, return true if the tree has a root-to-leaf path such that adding up all the
values along the path equals the given sum. Return false if no such path can be found."""#include <iostream>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
bool hasPathSum(TreeNode* root, int targetSum) {
 if (!root) return false;
 if (!root->left && !root->right) return root->val == targetSum; // Check if leaf
 return hasPathSum(root->left, targetSum - root->val) || hasPathSum(root->right, targetSum -
root->val);
}
int main() {
 // Create tree: [5, 4, 8, 11, null, 13, 4, 7, 2, null, null, null, 1]
 TreeNode* root = new TreeNode(5);
 root->left = new TreeNode(4);
 root->right = new TreeNode(8);
 root->left->left = new TreeNode(11);
 root->left->left->left = new TreeNode(7);
 root->left->left->right = new TreeNode(2);
 root->right->left = new TreeNode(13);
 root->right->right = new TreeNode(4);
 root->right->right->right = new TreeNode(1);
 int targetSum = 22;
 cout << (hasPathSum(root, targetSum) ? "true" : "false") << endl;
 return 0;}

"""Construct Binary Tree from Preorder and Inorder Traversal
Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree
and inorder is the inorder traversal of the same tree, construct and return the binary tree."""
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
TreeNode* buildTreeHelper(vector<int>& preorder, int preStart, int preEnd,
 vector<int>& inorder, int inStart, int inEnd,
 unordered_map<int, int>& inMap) {
 if (preStart > preEnd || inStart > inEnd) return nullptr;
 TreeNode* root = new TreeNode(preorder[preStart]);
 int inRoot = inMap[root->val];
 int numsLeft = inRoot - inStart;
 root->left = buildTreeHelper(preorder, preStart + 1, preStart + numsLeft, inorder, inStart, inRoot -
1, inMap);
 root->right = buildTreeHelper(preorder, preStart + numsLeft + 1, preEnd, inorder, inRoot + 1,
inEnd, inMap);
 return root;
}
TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
 unordered_map<int, int> inMap;
 for (int i = 0; i < inorder.size(); i++) inMap[inorder[i]] = i;
 return buildTreeHelper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1, inMap);
  }
void printInorder(TreeNode* root) {
 if (!root) return;
 printInorder(root->left);
 cout << root->val << " ";
 printInorder(root->right);
}
int main() {
 vector<int> preorder = {3, 9, 20, 15, 7};
 vector<int> inorder = {9, 3, 15, 20, 7};
 TreeNode* root = buildTree(preorder, inorder);
 printInorder(root); // Output: 9 3 15 20 7
 cout << endl;
 return 0;
}

""". Construct Binary Tree from Inorder and Postorder Traversal"""
  #include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}};
TreeNode* buildTreeHelper(vector<int>& inorder, int inStart, int inEnd,
 vector<int>& postorder, int postStart, int postEnd,
 unordered_map<int, int>& inMap) {
   if (inStart > inEnd || postStart > postEnd) return nullptr;
 TreeNode* root = new TreeNode(postorder[postEnd]);
 int inRoot = inMap[root->val];
 int numsLeft = inRoot - inStart;
 root->left = buildTreeHelper(inorder, inStart, inRoot - 1, postorder, postStart, postStart + numsLeft
- 1, inMap);
 root->right = buildTreeHelper(inorder, inRoot + 1, inEnd, postorder, postStart + numsLeft,
postEnd - 1, inMap);
 return root;
}
TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
 unordered_map<int, int> inMap;
 for (int i = 0; i < inorder.size(); i++) inMap[inorder[i]] = i;
 return buildTreeHelper(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1, inMap);
}
void printInorder(TreeNode* root) {
 if (!root) return;
 printInorder(root->left);
 cout << root->val << " ";
 printInorder(root->right);
}
int main() {
 vector<int> inorder = {9, 3, 15, 20, 7};
 vector<int> postorder = {9, 15, 7, 20, 3};
 TreeNode* root = buildTree(inorder, postorder);
 printInorder(root); // Output: 9 3 15 20 7
 cout << endl;
 return 0;
}

"""Sum Root to Leaf Numbers"""
#include <iostream>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
int sumNumbersHelper(TreeNode* root, int currentSum) {
 if (!root) return 0;
 currentSum = currentSum * 10 + root->val;
 if (!root->left && !root->right) return currentSum; // Leaf node
 return sumNumbersHelper(root->left, currentSum) + sumNumbersHelper(root->right,
currentSum);
}
int sumNumbers(TreeNode* root) {
 return sumNumbersHelper(root, 0);
}
int main() {
 TreeNode* root = new TreeNode(1);
 root->left = new TreeNode(2);
 root->right = new TreeNode(3);
   cout << sumNumbers(root) << endl; // Output: 25
 return 0;
}

"""Binary Tree Right Side View
Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of
the nodes you can see ordered from top to bottom."""
  #include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
vector<int> rightSideView(TreeNode* root) {
 vector<int> result;
 if (!root) return result;
   queue<TreeNode*> q;
 q.push(root);
 while (!q.empty()) {
 int levelSize = q.size();
 for (int i = 0; i < levelSize; i++) {
 TreeNode* current = q.front();
 q.pop();
 // Add the last node of the current level to the result
 if (i == levelSize - 1) result.push_back(current->val);
 if (current->left) q.push(current->left);
 if (current->right) q.push(current->right);
 }
 }
 return result;
}
int main() {
 TreeNode* root = new TreeNode(1);
 root->left = new TreeNode(2);
 root->right = new TreeNode(3);
 root->left->right = new TreeNode(5);
 root->right->right = new TreeNode(4);
 vector<int> result = rightSideView(root);
 for (int val : result) {
 cout << val << " ";
 }
 // Output: 1 3 4
 return 0;
}

"""Binary Tree Maximum Path Sum
A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has
an edge connecting them. A node can only appear in the sequence at most once. Note that the path
does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path."""
  #include <iostream>
#include <climits>
using namespace std;
struct TreeNode {
 int val;
 TreeNode* left;
 TreeNode* right;
 TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
int maxPathSumHelper(TreeNode* root, int& maxSum) {
 if (!root) return 0;
 // Compute maximum path sums for left and right subtrees
 int leftMax = max(0, maxPathSumHelper(root->left, maxSum));
 int rightMax = max(0, maxPathSumHelper(root->right, maxSum));
 // Update the overall maximum path sum
 maxSum = max(maxSum, leftMax + rightMax + root->val);
 // Return the maximum path sum including the current node
 return max(leftMax, rightMax) + root->val;
}
int maxPathSum(TreeNode* root) {
 int maxSum = INT_MIN;
 maxPathSumHelper(root, maxSum);
 return maxSum;
}
int main() {
 TreeNode* root = new TreeNode(1);
 root->left = new TreeNode(2);
 root->right = new TreeNode(3);
 cout << maxPathSum(root) << endl; // Output: 6
  return 0;
}

"""

