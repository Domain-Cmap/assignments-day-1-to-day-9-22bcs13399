"""1. Fibonacci Series Using Recursion """
#include <iostream> 
using namespace std;
int fibonacci(int n) {
 if (n <= 1) return n;
 return fibonacci(n - 1) + fibonacci(n - 2);
}
int main() {
 int n;
 cin >> n;
 if(n>=0 && n<=30)
 {
 cout << fibonacci(n) << endl;
 }
 else
 {
 cout<<"Invalid input.";
 return 1;
 }
 return 0;
}

"""2 Given the head of a singly linked list, reverse the list, and return the reversed list."""
  #include <iostream> //Programming in C++
using namespace std;
// Definition for singly-linked list.
struct ListNode {
 int val;
 ListNode* next;
 ListNode(int x) : val(x), next(nullptr) {}
};
// Iterative approach to reverse the linked list
ListNode* reverseListIterative(ListNode* head) {
 ListNode* prev = nullptr;
 ListNode* current = head;
 while (current != nullptr) {
 ListNode* nextNode = current->next; // Save the next node
 current->next = prev; // Reverse the link
 prev = current; // Move prev to current
   current = nextNode; // Move current to next node
 }
 return prev; // New head of the reversed list
}
// Recursive approach to reverse the linked list
ListNode* reverseListRecursive(ListNode* head) {
 // Base case: If the list is empty or has one node
 if (head == nullptr || head->next == nullptr) {
 return head;
 }
 // Reverse the rest of the list
 ListNode* newHead = reverseListRecursive(head->next);
 // Adjust the pointers
 head->next->next = head;
 head->next = nullptr;
 return newHead;
}
// Helper function to print the linked list
void printList(ListNode* head) {
 cout<<"[";
 while (head != nullptr) {
 cout << head->val << ", ";
 head = head->next;
 }
 cout <<"]"<< endl;
}
// Main function to test the solution
int main() {
 // Example 1: Create the linked list [1, 2, 3, 4, 5]
 ListNode* head = new ListNode(1);
 head->next = new ListNode(2);
  head->next->next = new ListNode(3);
 head->next->next->next = new ListNode(4);
 head->next->next->next->next = new ListNode(5);
 cout << "Original List: ";
 printList(head);
 // Test iterative reversal
 ListNode* reversedIterative = reverseListIterative(head);
 cout << "Reversed List (Iterative): ";
 printList(reversedIterative);
 // Reset the list for recursive test
 head = new ListNode(1);
 head->next = new ListNode(2);
 head->next->next = new ListNode(3);
 head->next->next->next = new ListNode(4);
 head->next->next->next->next = new ListNode(5);
 // Test recursive reversal
 ListNode* reversedRecursive = reverseListRecursive(head);
 cout << "Reversed List (Recursive): ";
 printList(reversedRecursive);
 return 0;
}

"""3 You are given two non-empty linked lists representing two non-negative integers. The
digits are stored in reverse order, and each of their nodes contains a single digit. Add the
two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0
itself."""
#include <iostream> //Programming in C++
using namespace std;
struct ListNode {
 int val;
 ListNode* next;
 ListNode(int x) : val(x), next(nullptr) {}
};
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
 ListNode* dummy = new ListNode(0);
  ListNode* current = dummy;
 int carry = 0;
 while (l1 || l2 || carry) {
 int sum = carry;
 if (l1) {
 sum += l1->val;
 l1 = l1->next;
 }
 if (l2) {
 sum += l2->val;
 l2 = l2->next;
 }
 carry = sum / 10;
 current->next = new ListNode(sum % 10);
 current = current->next;
 }
 return dummy->next;
}
int main() {
 int n1, n2, val;
 cin >> n1;
 ListNode* l1 = nullptr;
 ListNode* tail1 = nullptr;
 for (int i = 0; i < n1; ++i) {
 cin >> val;
 ListNode* newNode = new ListNode(val);
 if (!l1) l1 = tail1 = newNode;
 else {
 tail1->next = newNode;
 tail1 = newNode;
 }
 }
 cin >> n2;
 ListNode* l2 = nullptr;
 ListNode* tail2 = nullptr;
 for (int i = 0; i < n2; ++i) {
   cin >> val;
 ListNode* newNode = new ListNode(val);
 if (!l2) l2 = tail2 = newNode;
 else {
 tail2->next = newNode;
 tail2 = newNode;
 }
 }
 ListNode* result = addTwoNumbers(l1, l2);
 while (result) {
 cout << result->val << " ";
 result = result->next;
 }
 return 0;
}

"""4 Given an input string (s) and a pattern (p), implement wildcard pattern matching with
support for '?' and '*' where:
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial)."""
#include <iostream> //Programming in C++
#include <vector>
using namespace std;
bool isMatch(string s, string p) {
 int m = s.size(), n = p.size();
 vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
 dp[0][0] = true;
 for (int j = 1; j <= n; ++j)
 if (p[j - 1] == '*') dp[0][j] = dp[0][j - 1];
 for (int i = 1; i <= m; ++i) {
 for (int j = 1; j <= n; ++j) {
 if (p[j - 1] == '?' || p[j - 1] == s[i - 1])
 dp[i][j] = dp[i - 1][j - 1];
   else if (p[j - 1] == '*')
 dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
 }
 }
 return dp[m][n];
}
int main() {
 string s, p;
 cin >> s >> p;
 cout << (isMatch(s, p) ? "true" : "false") << endl;
 return 0;
}

"""Special binary strings are binary strings with the following two properties:
The number of 0's is equal to the number of 1's.
Every prefix of the binary string has at least as many 1's as 0's.
You are given a special binary string s.
A move consists of choosing two consecutive, non-empty, special substrings of s, and
swapping them. Two strings are consecutive if the last character of the first string is
exactly one index before the first character of the second string."""
#include <iostream> //Programming in C++
#include <string>
#include <vector>
#include <algorithm>
#include <numeric> // Include this header for accumulate
using namespace std;
string makeLargestSpecial(string s) {
 vector<string> specials;
 int count = 0, start = 0;
 for (int i = 0; i < s.size(); ++i) {
 count += (s[i] == '1') ? 1 : -1;
 if (count == 0) {
 specials.push_back("1" + makeLargestSpecial(s.substr(start + 1, i - start - 1)) +
"0");
 start = i + 1;
 }
 }
 sort(specials.rbegin(), specials.rend());
 return accumulate(specials.begin(), specials.end(), string(""));
}
int main() {
 string s;
 cin >> s;
 cout << makeLargestSpecial(s) << endl;
 return 0;
}

"""6 You are given the firstname and lastname of a person on two different lines. Your task is
to read them and print the following using function: Hello firstname lastname! You just delved into function"""
  #include <iostream> //Programming in C++
using namespace std;
void print_full_name(string first, string last) {
 cout << "Hello " << first << " " << last << "! You just delved into function." << endl;
}
int main() {
 string first, last;
 cin >> first >> last;
 print_full_name(first, last);
 return 0;
}

"""7. Find GCD of Number using Function 
Given an integer array nums, return the greatest common divisor of the smallest number
and largest number in nums. The greatest common divisor of two numbers is the largest
positive integer that evenly divides both numbers"""
  #include <iostream> //Programming in C++
#include <vector>
#include <algorithm>
using namespace std;
int gcd(int a, int b) {
 return b == 0 ? a : gcd(b, a % b);
}
int findGCD(vector<int>& nums) {
 int smallest = *min_element(nums.begin(), nums.end());
 int largest = *max_element(nums.begin(), nums.end());
 return gcd(smallest, largest);
}
int main() {
 int n, num;
 cin >> n;
 vector<int> nums;
 for (int i = 0; i < n; ++i) {
 cin >> num;
 nums.push_back(num);
 }
 cout << findGCD(nums) << endl;
 return 0;
}

"""8. Longest Substring Without Repeating Characters 
You are working on building a text editor application. One of the features you're focusing
on is a "word suggestion" system. The editor needs to identify the longest sequence of
characters typed without repeating any letters to suggest potential words or phrases. To
accomplish this, you must efficiently find the length of the longest substring of unique
characters as the user types."""
  #include <iostream> //Programming in C++
#include <unordered_map>
using namespace std;
int lengthOfLongestSubstring(string s) {
 unordered_map<char, int> charIndex;
 int maxLength = 0, start = 0;
 for (int i = 0; i < s.size(); ++i) {
   if (charIndex.find(s[i]) != charIndex.end() && charIndex[s[i]] >= start) {
 start = charIndex[s[i]] + 1;
 }
 charIndex[s[i]] = i;
 maxLength = max(maxLength, i - start + 1);
 }
 return maxLength;
}
int main() {
 string s;
 cin >> s;
 cout << lengthOfLongestSubstring(s) << endl;
 return 0;
}

"""9. Maximum Subarray Product
You are developing a financial analysis application where users input daily stock price
changes in an array. Your task is to determine the maximum profit or loss achievable
over a contiguous period, considering that the profit/loss for a period is calculated by
multiplying the daily percentage changes. This problem is critical for finding optimal
periods to make decisions for investments or short-term trading."""
  #include <iostream> //Programming in C++
#include <vector>
#include <algorithm>
using namespace std;
int maxProduct(vector<int>& nums) {
 int maxProd = nums[0], minProd = nums[0], result = nums[0];
 for (int i = 1; i < nums.size(); ++i) {
 if (nums[i] < 0) swap(maxProd, minProd);
 maxProd = max(nums[i], maxProd * nums[i]);
 minProd = min(nums[i], minProd * nums[i]);
 result = max(result, maxProd);
 }
 return result;
}
int main() {
 int n, num;
cin >> n;
 vector<int> nums;
 for (int i = 0; i < n; ++i) {
 cin >> num;
 nums.push_back(num);
 }
 cout << maxProduct(nums) << endl;
 return 0;
}

"""10. Minimum Candies Distribution 
There are n children standing in a line. Each child is assigned a rating value given in the
integer array ratings.
You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the
children"""
  #include <iostream> //Programming in C++
#include <vector>
#include <algorithm>
using namespace std;
int candy(vector<int>& ratings) {
 int n = ratings.size();
 vector<int> candies(n, 1);
 for (int i = 1; i < n; ++i) {
 if (ratings[i] > ratings[i - 1]) {
 candies[i] = candies[i - 1] + 1;
 }
 }
 for (int i = n - 2; i >= 0; --i) {
 if (ratings[i] > ratings[i + 1]) {
 candies[i] = max(candies[i], candies[i + 1] + 1);
 }
 }
 return accumulate(candies.begin(), candies.end(), 0);
}
  int main() {
 int n, rating;
 cin >> n;
 vector<int> ratings;
 for (int i = 0; i < n; ++i) {
 cin >> rating;
 ratings.push_back(rating);
 }
 cout << candy(ratings) << endl;
 return 0;
}

  
