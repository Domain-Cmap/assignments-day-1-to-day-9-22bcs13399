"""1. Searching a Number
Given an integer k and array arr. Your task is to return the position of the first
occurrence of k in the given array and if element k is not present in the array
then return -1.
Note: 1-based indexing is followed here"""
  #include <iostream>
#include <vector>
using namespace std;
int findFirstOccurrence(int k, vector<int>& arr) {
for (int i = 0; i < arr.size(); i++) {
if (arr[i] == k) {
return i + 1; // Return 1-based index
}
}
return -1; // Return -1 if k is not found
  }
int main() {
vector<int> arr1 = {9, 7, 16, 16, 4};
cout << findFirstOccurrence(16, arr1) << endl; // Output: 3
vector<int> arr2 = {1, 22, 57, 47, 34, 18, 66};
cout << findFirstOccurrence(98, arr2) << endl; // Output: -1
vector<int> arr3 = {1, 22, 57, 47, 34, 9, 66};
cout << findFirstOccurrence(9, arr3) << endl; // Output: 6
return 0;
}

"""2. Minimum Number of Moves to Seat Everyone
There are n availabe seats and n students standing in a room. You are given an
array seats of length n, where seats[i] is the position of the ith seat. You are also
given the array students of length n, where students[j] is the position of the jth
student.
You may perform the following move any number of times:
Increase or decrease the position of the ith student by 1 (i.e., moving the ith
student from position x to x + 1 or x - 1)
Return the minimum number of moves required to move each student to a seat
such that no two students are in the same seat."""
  #include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int minMovesToSeats(vector<int>& seats, vector<int>& students) {
  sort(seats.begin(), seats.end());
sort(students.begin(),students.end());
int moves = 0;
for (int i = 0; i < seats.size(); i++) {
moves += abs(seats[i] - students[i]); // Calculate the moves needed for each
student
}
return moves;
}
int main() {
vector<int> seats1 = {3, 1, 5};
vector<int> students1 = {2, 7, 4};
cout << minMovesToSeats(seats1, students1) << endl; // Output: 4
vector<int> seats2 = {4, 1, 5, 9};
vector<int> students2 = {1, 3, 2, 6};
cout << minMovesToSeats(seats2, students2) << endl; // Output: 7
return 0;
}

"""3. Search in 2D Matrix.
You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise."""
#include <iostream>
#include <vector>
using namespace std;
  bool searchMatrix(vector<vector<int>>& matrix, int target) {
int m = matrix.size();
int n = matrix[0].size();
int left = 0, right = m * n - 1;
while (left <= right) {
int mid = left + (right - left) / 2;
int midElement = matrix[mid / n][mid % n]; // Access the element at index
mid in 2D matrix
if (midElement == target) {
return true;
} else if (midElement < target) {
left = mid + 1;
} else {
right = mid - 1;
}
}
return false;
}
int main() {
vector<vector<int>> matrix1 = {{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34,
60}};
cout << (searchMatrix(matrix1, 3) ? "true" : "false") << endl; 
  vector<vector<int>> matrix2 = {{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34,
60}};
cout << (searchMatrix(matrix2, 13) ? "true" : "false") << endl; // Output:
false
return 0;
}

"""4.Sort Items by Groups Respecting Dependencies
There are n items each belonging to zero or one of m groups where group[i] is
the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs
to no group. The items and the groups are zero indexed. A group can have no
item belonging to it.
Return a sorted list of the items such that:
The items that belong to the same group are next to each other in the sorted list.
There are some relations between these items where beforeItems[i] is a list
containing all the items that should come before the i-th item in the sorted array
(to the left of the i-th item).
Return any solution if there is more than one solution and return an empty list if
there is no solution."""
#include <iostream>
#include <vector>
#include <deque>
#include <unordered_map>
#include <unordered_set>
using namespace std;
vector<int> topologicalSort(const unordered_map<int, vector<int>>& graph,
vector<int>& inDegree, int n) {
deque<int> queue;
vector<int> result;
for (int i = 0; i < n; ++i) {
if (inDegree[i] == 0) {
queue.push_back(i);
}
}
while (!queue.empty()) {
int node = queue.front();
  queue.pop_front();
result.push_back(node);
for (int neighbor : graph.at(node)) {
if (--inDegree[neighbor] == 0) {
queue.push_back(neighbor);
}
}
}
if (result.size() != n) {
return {}; // Cycle detected
}
return result;
}
vector<int> sortItems(int n, int m, vector<int>& group, vector<vector<int>>&
beforeItems) {
// Step 1: Create item graph and group graph
unordered_map<int, vector<int>> itemGraph;
vector<int> itemInDegree(n, 0)unordered_map<int, vector<int>> groupGraph;
vector<int> groupInDegree(m, 0);
// Step 2: Process the beforeItems to build the graph
for (int i = 0; i < n; ++i) {
for (int before : beforeItems[i]) {
itemGraph[before].push_back(i);
itemInDegree[i]++;
if (group[i] != group[before]) {
groupGraph[group[before]].push_back(group[i]);
groupInDegree[group[i]]++;
}
}
}
// Step 3: Topological sort for items
vector<int> itemOrder = topologicalSort(itemGraph, itemInDegree, n);
if (itemOrder.empty()) {
return {}; // No valid ordering for items
}
// Step 4: Group items by their group
unordered_map<int, vector<int>> groupItems;for (int item : itemOrder) {
if (group[item] == -1) {
groupItems[-1].push_back(item);
} else {
groupItems[group[item]].push_back(item);
}
}
// Step 5: Topological sort for groups
vector<int> groupOrder = topologicalSort(groupGraph, groupInDegree, m);
if (groupOrder.empty()) {
return {}; // No valid ordering for groups
}
// Step 6: Collect items in sorted order according to group order
vector<int> result;
for (int g : groupOrder) {
for (int item : groupItems[g]) {
result.push_back(item);
}
}
return result;}
int main() {
// Example 1
int n1 = 8, m1 = 2;
vector<int> group1 = {-1, -1, 1, 0, 0, 1, 0, -1};
vector<vector<int>> beforeItems1 = { {}, {6}, {5}, {6}, {3, 6}, {}, {}, {} };
vector<int> result1 = sortItems(n1, m1, group1, beforeItems1);
if (!result1.empty()) {
for (int item : result1) {
cout << item << " ";
}
} else {
cout << "[]";
}
cout << endl;vector<int> result2 = sortItems(n2, m2, group2, beforeItems2);
if (!result2.empty()) {
for (int item : result2) {
cout << item << " ";
}
} else {
cout << "[]";
}
cout << endl;
return 0;
}

"""5.Find Minimum in Rotated Sorted Array II. Suppose an array of length n sorted in ascending order is rotated between 1 and n
times. For example, the array nums = [0,1,4,4,5,6,7] might become:
[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array
[a[n-1], a[0], a[1], a[2], ..., a[n-2]].
Given the sorted rotated array nums that may contain duplicates, return the
minimum element of this array."""
  #include <iostream>
#include <vector>
using namespace std;
int findMin(vector<int>& nums) {
int left = 0, right = nums.size() - 1;
while (left < right) {
  int mid = left + (right - left) / 2;
// Compare mid with the rightmost element
if (nums[mid] < nums[right]) {
// Minimum lies to the left of mid, including mid
right = mid;
} else if (nums[mid] > nums[right]) {
// Minimum lies to the right of mid
left = mid + 1;
} else {
// nums[mid] == nums[right], reduce the search space
right--;
}
}
return nums[left];
}
int main() {
vector<int> nums1 = {1, 3, 5};
cout << "Minimum in nums1: " << findMin(nums1) << endl; // Output: 1
vector<int> nums2 = {2, 2, 2, 0, 1};
cout << "Minimum in nums2: " << findMin(nums2) << endl; // Output: 0
return 0;
}



